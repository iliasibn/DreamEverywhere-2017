
    
    #version 130
    uniform float     id    ;
   uniform sampler2D 	texture;      // Première texture



    uniform float        lift_r;
    uniform float         lift_g;
    uniform float        lift_b;

    uniform float         gamma_r;
    uniform float         gamma_g;
    uniform float         gamma_b;

     uniform float          gain_r;
     uniform float          gain_g;
     uniform float          gain_b;

    uniform float         l_gamma;
    uniform float        bl;
    uniform float         wl;


    float               SDRgamma;

    float _moy;
vec3 lift, gamma, gain;


    // Master degree in vision sciences is needed :
void color_grading (sampler2D UYVYtex)
    {

            float tx, ty, Y, Cb, Cr, r, g, b;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y; // The UYVY texture appears to the shader with 1/2 the true width since we used RGBA format to pass UYVY

            int true_width = textureSize(UYVYtex, 0).x * 2;

            if (fract(floor(tx * true_width + 0.5) / 2.0) > 0.0)
             Y = texture2D(UYVYtex, vec2(tx,ty)).a;          // odd so choose Y1
            else
             Y = texture2D(UYVYtex, vec2(tx,ty)).g;          // even so choose Y0
            Cb = texture2D(UYVYtex, vec2(tx,ty)).b;
            Cr = texture2D(UYVYtex, vec2(tx,ty)).r;
    // Y: Undo 1/256 texture value scaling and scale [16..235] to [0..1] range
    // C: Undo 1/256 texture value scaling and scale [16..240] to [-0.5 .. + 0.5] range
        Y = (Y * 256.0 - 16.0) / 219.0;
            Cb = (Cb * 256.0 - 16.0) / 224.0 - 0.5;
            Cr = (Cr * 256.0 - 16.0) / 224.0 - 0.5;

            r = Y + 1.5748 * Cr;  // Convert to RGB using Rec.709 conversion matrix (see eq 26.7 in Poynton 2003)
            g = Y - 0.1873 * Cb - 0.4681 * Cr;
            b = Y + 1.8556 * Cb;

            SDRgamma = 2.4;

// Opération sur les valeurs

_moy = (lift_r + lift_g + lift_b)/3;
lift.r = 0 + (lift_r - _moy)/255/2;
lift.g = 0 + (lift_g - _moy)/255/2;
lift.b = 0 + (lift_b - _moy)/255/2;

_moy = (gamma_r + gamma_g + gamma_b)/3;
gamma.r = 1 + (gamma_r - _moy)/255/2;
gamma.g = 1 + (gamma_g - _moy)/255/2;
gamma.b = 1 + (gamma_b - _moy)/255/2;

_moy = (gain_r + gain_g + gain_b)/3;
gain.r = 1 + (gain_r - _moy)/255/2;
gain.g = 1 + (gain_g - _moy)/255/2;
gain.b = 1 + (gain_b - _moy)/255/2;

// Correction colorimétrique

vec3 inv_gamma = (SDRgamma / (gamma));

vec4 x;
x = vec4(r,g,b,1);


x.rgb /= x.aaa;


//Gamma Level
x.rgb = pow(x.rgb, vec3(1/(l_gamma/50)));

//Black Level
x.rgb  += (1-x.rgb*x.rgb*x.rgb)*((bl/50)-1)/4;

//White Level
x.rgb += x.rgb*((wl/50)-1)/4;

// On fait ça, car il est impossible de faire la puissance de chiffres négatifs
x.rgb = max(x.rgb, 0.0);

// On va traiter des données avec le gamma 2.2

x.rgb = pow(x.rgb, vec3(1.0/SDRgamma));
x.rgb += (lift) * (vec3(1) - sqrt(sqrt(x.rgb)));
x.rgb = pow(x.rgb, inv_gamma );

x.rgb *= pow((gain), (1/gamma));
x.rgb *= x.aaa;
x.a = 1;

gl_FragData[0] = x;
    }

void main(void)
{
	color_grading(texture);
}




