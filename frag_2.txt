
    
    #version 130
    uniform float     id    ;
   uniform sampler2D 	texture;      // PremiÃ¨re texture
   
   out vec4 out_c;

    // Master degree in vision sciences is needed :
void color_grading (sampler2D UYVYtex)
    {
    
            float tx, ty, Y, Cb, Cr, r, g, b;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y; // The UYVY texture appears to the shader with 1/2 the true width since we used RGBA format to pass UYVY
     
            int true_width = textureSize(UYVYtex, 0).x * 2;
     
            if (fract(floor(tx * true_width + 0.5) / 2.0) > 0.0)
             Y = texture2D(UYVYtex, vec2(tx,ty)).a;          // odd so choose Y1
            else
             Y = texture2D(UYVYtex, vec2(tx,ty)).g;          // even so choose Y0
            Cb = texture2D(UYVYtex, vec2(tx,ty)).b;
            Cr = texture2D(UYVYtex, vec2(tx,ty)).r;
    // Y: Undo 1/256 texture value scaling and scale [16..235] to [0..1] range
    // C: Undo 1/256 texture value scaling and scale [16..240] to [-0.5 .. + 0.5] range
        Y = (Y * 256.0 - 16.0) / 219.0;
            Cb = (Cb * 256.0 - 16.0) / 224.0 - 0.5;
            Cr = (Cr * 256.0 - 16.0) / 224.0 - 0.5;
     
            r = Y + 1.5748 * Cr;  // Convert to RGB using Rec.709 conversion matrix (see eq 26.7 in Poynton 2003)
            g = Y - 0.1873 * Cb - 0.4681 * Cr;
            b = Y + 1.8556 * Cb;
    	out_c = vec4(1,0,0,1);
    }

void main(void)
{
	color_grading(texture);
}
