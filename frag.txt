

    /*
     * alpha : quand t-bar : envoyé entre O et 1 en float
     * Paramètres :
     * 0 : Null
     * 1 : fondu
     *      alpha : avancement
     *		iris : iris virtuel
     *  	textureA : première texture
     *      textureB : deuxième texture
     * 2 : luma
     * 3 : chroma
     * 4 : Volets
     *      alpha : avancement
     *      beta : type de volet
     *              0 : volet gauche droite
     *              1 : volet en cercle
     * 		iris : iris virtuel
     *      textureA : première texture
     *      textureB : deuxième texture
     * 5 : Balance des noirs
     *  textureA : l'unique texture
     *      alpha : le gain dans les rouges : par défaut à 0. Peut être négatif, y aller molo (entre -50 et 50 disons)
     *  	beta : le gain dans les bleus : idem
     *  	ch_r (attention c'est un entier, toutes les valeurs seront divisées par 100): le gain du noir en géneral : par défaut à 100. Peut aller dans les negatifs mais pas trop (genre -300) et dans les positif (idem)
     * 6 : Générateur de noir
     * 		textureA : la texture à remplir de noir
     * 9 : Picture-in-Picture
     *		taillepip : Taille de l'image à incruster
     *		textureA : première texture
     *		textureB : deuxième texture
     *		pos_x : Position horizontale de l'image à incruster
     *		pos_y : Position verticale de l'image à incruster
     *
     * Do not edit under this line exept if you know what you are doing
     * Trepassors will be shot
    */
     
    #version 130
    uniform float     mode    ;
    uniform float     alpha   ;
    uniform float     beta    ;
    uniform float     iris    ;
    uniform float     taille_pip    ;
    uniform float     pos_x    ;
    uniform float     pos_y    ;
    uniform float     modepip    ;
    uniform sampler2D textureA;      // Première texture
    uniform sampler2D textureB;      // Deuxième texture
    uniform sampler2D textureC;      // Troisième texture
    uniform int       ch_r;                  // Composante rouge pour la chroma
    uniform int       ch_g;                  // Composante verte pour la chroma
    uniform int       ch_b;                  // Composante bleu  pour la chroma


  vec4 yuv_to_rgb (sampler2D UYVYtex)
    {
            float tx, ty;
            vec4 x;
            x.a = 1;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y; // The UYVY texture appears to the shader with 1/2 the true width since we used RGBA format to pass UYVY
     
            int true_width = textureSize(UYVYtex, 0).x * 2;

             x.r = texture2D(UYVYtex, vec2(tx,ty)).r;          // even so choose Y0
           x.g = texture2D(UYVYtex, vec2(tx,ty)).g;
            x.b = texture2D(UYVYtex, vec2(tx,ty)).b;
   
    return x;
    }
       
float norme (vec3 a)
    {
            return sqrt((a.x*a.x)+(a.y*a.y)+(a.z*a.z));
    }
     
float distance (vec3 a, vec3 b)
    {
            return norme(b-a);
    }
               // PGM PVW PGM    							0..255
void chroma (float seuil, float tolerance, vec4 fill, vec4 background, vec4 key, vec3 color)
    {

    float d;
	seuil = 1 - seuil;
    seuil = seuil *442;
    tolerance = tolerance *255;
 	d = distance (vec3(key.r*255,key.g*255,key.b*255), color) ; // Codée sur 255
     
            if      ( d > (seuil + tolerance))
            { 
                gl_FragColor = fill ;
            }
            else if ( d < (seuil - tolerance)) // Toujours ici
            {     
 		gl_FragColor = background ;

            }
            else
            {
            
     //  |-------------------------|------------------------------|
     //  S-T			Y		   S							 S+T ---> Background
     
                    float temp = (d - ( seuil - tolerance )) / (2 * tolerance);
                    gl_FragColor = mix (fill,background, temp);
            }

    }
     
void luma (float seuil, float tolerance, vec4 fill, vec4 background, sampler2D key)
    {
    float tx, ty, Y;
    seuil = seuil *255;
    tolerance = tolerance *255;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y;
            Y = texture2D(key, vec2(tx,ty)).g;       // La pouéssance entre 0 et 255
            Y = Y *255;
     
            if      ( Y > (seuil + tolerance))
            {      
                    gl_FragColor =  background ;
            }
            else if ( Y < (seuil - tolerance))
            {
                    gl_FragColor = fill ;
            }
            else
            {
            /*              vec4 temp;
            temp.r = 0.0;
            temp.g = 1.0;
            temp.b = 0.0;
            temp.a = 1.0;
     gl_FragColor =  temp ;*/
     //  |-------------------------|------------------------------|
     //  S-T			Y		   S							 S+T ---> Background
     
                    float temp = (Y - ( seuil - tolerance )) / (2 * tolerance);
                    gl_FragColor = mix (fill,background, temp);
            }
    }
     
     
void volet_gd (float avancement, sampler2D tex1, sampler2D tex2)
    {
    float tx, ty, Y;
    tx = gl_TexCoord[0].x;
    ty = gl_TexCoord[0].y;
    vec4 temp;
    int true_width = textureSize(tex1, 0).x * 2;
    if( tx > avancement)
    {
            temp.r = yuv_to_rgb(tex1).r;
            temp.g = yuv_to_rgb(tex1).g;
            temp.b = yuv_to_rgb(tex1).b;
            temp.a = 1.0;
    }
    else
    {
    temp.r = yuv_to_rgb(tex2).r;
    temp.g = yuv_to_rgb(tex2).g;
    temp.b = yuv_to_rgb(tex2).b;
    temp.a = 1.0;
    }
    gl_FragColor = temp;
    }

void pip (float a, sampler2D tex1, sampler2D tex2, float b, float c, float modepip)
    {
    float tx, ty;
    tx = gl_TexCoord[0].x;
    ty = gl_TexCoord[0].y;
            
    if (modepip == 0)
		{
			vec4 temp = texture2D(tex1, ((gl_TexCoord[0].xy - vec2((1-a)/2,(1-a)/2)) * (1/a))-vec2(b/a,c/a));
			vec4 test;
		 
				float Y, Cb, Cr; 
				int true_width = 1920 * 2;
		 
				if (fract(floor(tx * true_width + 0.5) / 2.0) > 0.0)
				 Y = temp.a;         
				else
				 Y = temp.g;         
				Cb = temp.b;
				Cr = temp.r;

				Y = (Y * 256.0 - 16.0) / 219.0;
				Cb = (Cb * 256.0 - 16.0) / 224.0 - 0.5;
				Cr = (Cr * 256.0 - 16.0) / 224.0 - 0.5;
		 
				test.r = Y + 1.5748 * Cr;  
				test.g = Y - 0.1873 * Cb - 0.4681 * Cr;
				test.b = Y + 1.8556 * Cb;
		  
				if  ( tx>((1-a)/2+(b)) )
				{if (tx<(1-((1-a)/2-(b))) )
					{if (ty>((1-a)/2)+(c))
						{if (ty<(1-((1-a)/2-(c))) )
						gl_FragColor = test; 
						else
						gl_FragColor =  yuv_to_rgb(tex2);}
					else
                                        gl_FragColor =  yuv_to_rgb(tex2);}
				else
                                gl_FragColor =  yuv_to_rgb(tex2);}
		else
                gl_FragColor =  yuv_to_rgb(tex2);

		}
    else
    		{
			vec4 temp = texture2D(tex2, ((gl_TexCoord[0].xy - vec2((1-a)/2,(1-a)/2)) * (1/a))-vec2(b/a,c/a));
			vec4 test;
		 
				float Y, Cb, Cr; 
				int true_width = 1920 * 2;
		 
				if (fract(floor(tx * true_width + 0.5) / 2.0) > 0.0)
				 Y = temp.a;         
				else
				 Y = temp.g;         
				Cb = temp.b;
				Cr = temp.r;

				Y = (Y * 256.0 - 16.0) / 219.0;
				Cb = (Cb * 256.0 - 16.0) / 224.0 - 0.5;
				Cr = (Cr * 256.0 - 16.0) / 224.0 - 0.5;
		 
				test.r = Y + 1.5748 * Cr;  
				test.g = Y - 0.1873 * Cb - 0.4681 * Cr;
				test.b = Y + 1.8556 * Cb;
		  
				if  ( tx>((1-a)/2+(b)) )
				{if (tx<(1-((1-a)/2-(b))) )
					{if (ty>((1-a)/2)+(c))
						{if (ty<(1-((1-a)/2-(c))) )
						gl_FragColor = test; 
						else
                                                gl_FragColor =  yuv_to_rgb(tex1);}
					else
                                        gl_FragColor =  yuv_to_rgb(tex1);}
				else
                                gl_FragColor =  yuv_to_rgb(tex1);}
		else
                gl_FragColor =  yuv_to_rgb(tex1);

		}
	}
     
void volet_cercle (float avancement, sampler2D tex1, sampler2D tex2, float iris)
    {
            float tx, ty;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y;
            int true_width  = textureSize(tex1, 0).x*2 ;
            int true_height = textureSize(tex1, 0).y ;
		float ratio = true_width/true_height;

		float tx2 = (tx-0.5) * (1.333);

            if  ( (abs(tx2)*abs(tx2) +  abs(ty-0.5) * abs(ty-0.5) )> avancement*avancement*0.60)
                    gl_FragColor = ((1.6*iris)/100) * yuv_to_rgb(tex1) ;
            else
                    gl_FragColor =  ((1.6*iris)/100) * yuv_to_rgb(tex2);
    }
     
     
    // Volet en croix +
    //      if  ( abs(tx-0.5) > (avancement/2) && abs(ty-0.5) > avancement /2)
     
void gris (sampler2D tex1)
    {
            float tx, ty, Y;
            tx = gl_TexCoord[0].x;
            ty = gl_TexCoord[0].y;
            int true_width  = textureSize(tex1, 0).x * 2;
            int true_height = textureSize(tex1, 0).y    ;
            vec4 temp ;
            temp.r = tx;
            temp.g = tx;
            temp.b = tx;
            temp.a = 1.0;
    // Tx représente l'avancement horizontal entre 0 et 1
            gl_FragColor = temp;
            //gl_FragColor = (1,1,1,temp);
    }
    
    
void mire (sampler2D tex1)
    {
            float tx;
            tx = gl_TexCoord[0].x;

            int true_width  = textureSize(tex1, 0).x * 2;
            int true_height = textureSize(tex1, 0).y    ;
            
            if(tx < 0.125)
            { // Barre de noir
				vec4 temp ;
				temp.r = 0.0;
				temp.g = 0.0;
				temp.b = 0.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.250)
            { // Barre de bleu
				vec4 temp ;
				temp.r = 0.0;
				temp.g = 0.0;
				temp.b = 1.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.375)
            { // Barre de rouge
				vec4 temp ;
				temp.r = 1.0;
				temp.g = 0.0;
				temp.b = 0.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.500)
            { // Barre de magenta
				vec4 temp ;
				temp.r = 1.0;
				temp.g = 0.0;
				temp.b = 1.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.625)
            { // Barre de vert
				vec4 temp ;
				temp.r = 0.0;
				temp.g = 1.0;
				temp.b = 0.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.750)
            { // Barre de cyan
				vec4 temp ;
				temp.r = 0.0;
				temp.g = 1.0;
				temp.b = 1.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else if(tx < 0.875)
            { // Barre de jaune
				vec4 temp ;
				temp.r = 1.0;
				temp.g = 1.0;
				temp.b = 0.0;
				temp.a = 1.0;
				gl_FragColor = 0.75*temp;
			}
			else
            { // Barre de blanc
				vec4 temp ;
				temp.r = 1.0;
				temp.g = 1.0;
				temp.b = 1.0;
				temp.a = 1.0;
				gl_FragColor = temp;
			}
 }
    
    
void noir (sampler2D tex1)
    {
            vec4 temp ;
            temp.r = 0.0;
            temp.g = 0.0;
            temp.b = 0.0;
            temp.a = 1.0;
            gl_FragColor = temp;
    }
    
void viris(vec4 tex1, float iris)
	{
		gl_FragColor = iris * tex1;
	}

     // la texture / 0 / 0 / 0
    void balance_noir (vec4 tex1, float alpha, float beta, int ch_r)
    {
            float gamma = ch_r / 100;

	vec4 temp ;
            temp.g = tex1.g ;

          temp.r = tex1.r + (alpha*gamma);
            temp.b = tex1.b + (beta*gamma);    

  
	temp.a = 1.0;
           gl_FragColor = temp;
    }
     
void fondu ( sampler2D tex1, sampler2D tex2, float alpha)
{
         gl_FragColor = ( mix (yuv_to_rgb(tex1), yuv_to_rgb(tex2), alpha));
}

void main(void)
    {
    vec3 rgb;
    rgb = vec3(ch_r, ch_g, ch_b);
            if      (0 == mode)
                    fondu (textureA, textureB, 0);
            if      (1 == mode) // Mix en opacité
                    fondu (textureA, textureB, alpha);
            else if (2 == mode) // Luma key
                    luma (alpha, beta, yuv_to_rgb(textureA), yuv_to_rgb(textureB), textureC);
            else if (3 == mode) // Chroma key
                    chroma (alpha, beta, yuv_to_rgb(textureA), yuv_to_rgb(textureB), yuv_to_rgb(textureC), rgb);
            else if (4 == mode) // Volet
            {
                    if (0 == beta) // Volet gauche vers droite
                            volet_gd(alpha, textureA, textureB);
                    if (1 == beta) // Volet en cercle
                            volet_cercle(alpha, textureA, textureB, iris);
            }
            else if (5 == mode) // Balance des noirs
            {
                    balance_noir(yuv_to_rgb(textureA),alpha,beta,ch_r);
            }
            else if (6 == mode) // Générateur de noir
            {
                    noir(textureA);
            }
            else if (7 == mode) // Générateur de mire
            {
                    mire(textureA);
            }
			else if (8 == mode) // Mode Cut
			{
                                viris(yuv_to_rgb(textureA),(1.6*iris)/100);
			}
					else if (9 == mode) 
			{
				pip(taille_pip, textureA, textureB, pos_x, pos_y, modepip);
			}
}


